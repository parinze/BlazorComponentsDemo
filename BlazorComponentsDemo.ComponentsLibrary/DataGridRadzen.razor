@typeparam TType

@if (isLoading == true)
{
	<div class="datagridspinnercontainer">
		<img src="assets/images/datagridspinner.svg" class="datagridspinner">
		<div class="datagridloading">Loading</div>
	</div>
}
else
{
	<RadzenDataGrid
		AllowColumnResize="true"
		AllowSorting="true"
		AllowPaging="true"
		PageSizeOptions="@PageSizeOptions"
		ShowPagingSummary="true"
		PagingSummaryFormat="@pagingSummaryFormat"
		AllowAlternatingRows="true"
		Data="@Data"
		TItem="@TType"
		ColumnWidth="100px"
		GridLines="Radzen.DataGridGridLines.Both">
		<Columns>
			@foreach (var property in typeof(TType).GetProperties())
			{
				@if (property.PropertyType.FullName == typeof(DateTime).FullName
						|| property.PropertyType.FullName == typeof(DateTime?).FullName
						|| property.PropertyType.FullName == typeof(DateTimeOffset).FullName
						|| property.PropertyType.FullName == typeof(DateTimeOffset?).FullName)
				{
					<RadzenDataGridColumn TItem="TType" Property="@property.Name" Title="@PropertyToHeaderName[property.Name]" FormatString="{0:MM/dd/yyyy HH:mm}" />
				}
				else if (property.Name == BadgeColumnName)
				{
					<RadzenDataGridColumn TItem="TType" Property="@BadgeColumnName" Title="@PropertyToHeaderName[BadgeColumnName]">
						<Template>
							@{
								var properties = context.GetType().GetProperties();
								var badgeColumnProperty = properties.Single(p => p.Name == BadgeColumnName);
								var propertyName = badgeColumnProperty.Name;
								var propertyValue = badgeColumnProperty.GetValue(context);

								if (propertyName == BadgeColumnName)
								{
									string chosenColorBadgeStyle = "";
									if (GreenBadgeWords.Contains(propertyValue.ToString()))
									{
										chosenColorBadgeStyle = greenBadgeStyle;
									}
									else if (RedBadgeWords.Contains(propertyValue.ToString()))
									{
										chosenColorBadgeStyle = redBadgeStyle;
									}
									else
									{
										chosenColorBadgeStyle = grayBadgeStyle;
									}

									<div style="@baseBadgeStyle @chosenColorBadgeStyle">
										@propertyValue
									</div>
								}
								
							}
						</Template>
					</RadzenDataGridColumn>

				}
				else
				{
					<RadzenDataGridColumn TItem="TType" Property="@property.Name" Title="@PropertyToHeaderName[property.Name]" />
				}
			}
		</Columns>
	</RadzenDataGrid>
}
@code {
	/// <summary>
	/// An array of <typeparamref name="TType"/> objects.
	/// </summary>
	[Parameter][EditorRequired] public IEnumerable<TType>? Data { get; set; }

	/// <summary>
	/// Dictionary mapping of the property names of <typeparamref name="TType"/> class to desired header names.
	/// <para>E.g. Property: PurchaseDate > {"PurchaseDate", "Purchase Date"}</para>
	/// </summary>
	[Parameter][EditorRequired] public Dictionary<string, string> PropertyToHeaderName { get; set; } = new();


	[Parameter] public string? BadgeColumnName { get; set; }
	[Parameter] public string[]? GreenBadgeWords { get; set; }
	[Parameter] public string[]? RedBadgeWords { get; set; }


	private bool isLoading = false;
	private IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 10, 20, 50, 100, 500 };
	private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

	// Badge styles for Status column
	private string baseBadgeStyle = "border-radius:20px;text-align:center;";
	private string greenBadgeStyle = "background-color:#E5F2E8;color:#28A745;";
	private string redBadgeStyle = "background-color:#FAE5E5;color:#DC5151;";
	private string grayBadgeStyle = "background-color:#DAD9D9;color:#636262;";


	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		await Task.Delay(3000);
		base.OnInitialized();
		isLoading = false;
	}
}
