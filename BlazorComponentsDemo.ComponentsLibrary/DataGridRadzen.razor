@typeparam TType

<RadzenDataGrid 
	AllowColumnResize="true"
	AllowSorting="true"
	AllowPaging="true"
	PageSizeOptions="@PageSizeOptions"
	ShowPagingSummary="true"
	PagingSummaryFormat="@pagingSummaryFormat"
	AllowAlternatingRows="true"
	PageSizeChanged="@(args => pageSize = args)"
	Data="@Data"
	LoadData="@LoadData"
	IsLoading="@IsLoading" 
	TItem="@TType"
	ColumnWidth="100px"
	GridLines="Radzen.DataGridGridLines.Both"
	Count="@QueryCount">
	<Columns>
		@foreach (var property in typeof(TType).GetProperties())
		{
			@if (property.PropertyType.FullName == typeof(DateTime).FullName
					|| property.PropertyType.FullName == typeof(DateTime?).FullName
					|| property.PropertyType.FullName == typeof(DateTimeOffset).FullName
					|| property.PropertyType.FullName == typeof(DateTimeOffset?).FullName)
			{
				<RadzenDataGridColumn TItem="TType" Property="@property.Name" Title="@PropertyToHeaderName[property.Name]" FormatString="{0:MM/dd/yyyy HH:mm}" />
			}
			else if (property.Name == "Status")
			{
				<RadzenDataGridColumn TItem="TType" Property="Status" Title="Status">
					<Template>
						@{
							var properties = context.GetType().GetProperties();
							var statusColumnProperty = properties.Single(p => p.Name == "Status");
							var propertyValue = statusColumnProperty.GetValue(context);

							var status = Statuses.FirstOrDefault(s => s.Label == propertyValue!.ToString());

							if(status != null)
							{
								<div class="badge badge-pill" style="@status.Style">@status.Label</div>
							}
							else
							{
								<div class="badge badge-pill" style="background-color:#DAD9D9;color:#636262;">@propertyValue</div>
							}
						}
					</Template>
				</RadzenDataGridColumn>

			}
			else
			{
				<RadzenDataGridColumn TItem="TType" Property="@property.Name" Title="@PropertyToHeaderName[property.Name]" />
			}
		}
	</Columns>
</RadzenDataGrid>

@code {
	// private bool isLoading = false;
	private IEnumerable<int> PageSizeOptions { get; set; } = new int[] { 10, 20, 50, 100, 500 };
	private int pageSize = 10;
	private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

	/// <summary>
	/// An array of <typeparamref name="TType"/> objects.
	/// </summary>
	[Parameter][EditorRequired] public IEnumerable<TType>? Data { get; set; }

	/// <summary>
	/// A function to load data (as a queryable collection) into the data grid.
	/// <para>LoadDataArgs includes the following properties:</para>
	/// <para>Top: int (current page size)</para>
	/// <para>Skip: int (# of records to skip on current page)</para>
	/// <para>OrderBy: string (sort expression as a string)</para>
	/// <para>Filter: string (filter expression as a string)</para>
	/// </summary>
	[Parameter][EditorRequired] public Func<LoadDataArgs, Task> LoadData { get; set; }
	
	/// <summary>
	/// A boolean value to indicate if the data grid is loading.
	/// </summary>
	[Parameter][EditorRequired] public bool IsLoading { get; set; }

	/// <summary>
	/// The total number of records in the queryable data collection to be loaded into the data grid.
	/// </summary>
	[Parameter][EditorRequired] public int QueryCount { get; set; }

	/// <summary>
	/// Dictionary mapping of the property names of <typeparamref name="TType"/> class to desired header names.
	/// <para>E.g. Property: PurchaseDate > {"PurchaseDate", "Purchase Date"}</para>
	/// </summary>
	[Parameter][EditorRequired] public Dictionary<string, string> PropertyToHeaderName { get; set; } = new();

	/// <summary>
	/// A list of <see cref="Status"/> objects to be used to specify styles based on the specified status label.
	/// </summary>
	[Parameter] public List<Status> Statuses { get; set; } = new List<Status>() {
		new Status() { Label = "New", Style = "background-color:#DAD9D9;color:#636262;", Code = null },
		new Status() { Label = "Active", Style = "background-color:#E5F2E8;color:#28A745;", Code = 1 },
		new Status() { Label = "Deleted", Style = "background-color:#FAE5E5;color:#DC5151;", Code = 0 }
	};

}
