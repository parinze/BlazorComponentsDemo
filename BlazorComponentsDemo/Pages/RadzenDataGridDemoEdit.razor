@page "/radzendatagridedit"
@using System.Linq.Dynamic.Core
@inject IDataAccessService _dataAccessService
@inject HttpClient Http

<h3>Radzen DataGrid TreatmentCardGrid</h3>

<DataGridDemoModal @ref="visitModal" Title="Visit Modal">
    <EditForm Model=@treatmentCardEntryModel>
        <div class="form-group">
            <label for="new-treatment-asst">Assistant:</label>
            <InputText id="new-treatment-asst" class="form-control" @bind-Value="@treatmentCardEntryModel.Asst" />
        </div>
        <div class="form-group">
            <label for="new-treatment-proc">Procedure:</label>
            <InputText id="new-treatment-proc" class="form-control" @bind-Value="@treatmentCardEntryModel.Proc" />
        </div>
        <div class="form-group">
            <label for="new-treatment-dr">DR:</label>
            <InputText id="new-treatment-dr" class="form-control" @bind-Value="@treatmentCardEntryModel.DR" />
        </div>
        <div class="form-group">
            <label for="txNotes">Tx Notes:</label>
            <InputText id="new-treatment-txNotes" class="form-control" @bind-Value="@treatmentCardEntryModel.TxNotes" />
        </div>
        <div class="form-group">
            <label for="new-treatment-awu">AWU:</label>
            <InputText id="new-treatment-awu" class="form-control" @bind-Value="@treatmentCardEntryModel.AWU" />
        </div>
        <div class="form-group">
            <label for="new-treatment-bb">BB:</label>
            <InputText id="new-treatment-bb" class="form-control" @bind-Value="@treatmentCardEntryModel.BB" />
        </div>
        <div class="form-group">
            <label for="new-treatment-awl">AWL:</label>
            <InputText id="new-treatment-awl" class="form-control" @bind-Value="@treatmentCardEntryModel.AWL" />
        </div>
        <div class="form-group">
            <label for="new-treatment-oh">OH:</label>
            <InputText id="new-treatment-oh" class="form-control" @bind-Value="@treatmentCardEntryModel.OH" />
        </div>
        <div class="form-group">
            <label for="new-treatment-el">E/L:</label>
            <InputText id="new-treatment-el" class="form-control" @bind-Value="@treatmentCardEntryModel.EL" />
        </div>
        <div class="form-group">
            <label for="new-treatment-nvt">NVT:</label>
            <InputText id="new-treatment-nvt" class="form-control" @bind-Value="@treatmentCardEntryModel.NVT" />
        </div>
        <div class="form-group">
            <label for="new-treatment-wks">WKS:</label>
            <InputNumber id="new-treatment-wks" class="form-control" @bind-Value="@treatmentCardEntryModel.WKS" />
        </div>
        <div class="form-group">
            <label for="new-treatment-chart">Chart:</label>
            <InputText id="new-treatment-chart" class="form-control" @bind-Value="@treatmentCardEntryModel.Chart" />
        </div>
        <div class="form-group">
            <label for="new-treatment-test">Test:</label>
            <InputText id="new-treatment-test" class="form-control" @bind-Value="@treatmentCardEntryModel.Test" />
        </div>
        <div class="form-group">
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => OnVisitFormSubmission()">Save Changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => visitModal.Close()">Cancel</button>
            </div>
        </div>
    </EditForm>
</DataGridDemoModal>

<DataGridDemoModal @ref="commentModal" Title="Comment Modal">
    <EditForm Model=@treatmentCardEntryModel>
            <div class="form-group">
                <label for="new-treatment-asst">Assistant:</label>
            <InputText id="new-treatment-asst" class="form-control" @bind-Value="@treatmentCardEntryModel.Asst" />
            </div>
        <div class="form-group">
            <label for="new-treatment-comment">Comment:</label>
            <InputTextArea id="new-treatment-comment" class="form-control" @bind-Value="@treatmentCardEntryModel.Comment" />
        </div>
        <div class="form-group">
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => OnCommentFormSubmission()">Save Changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => commentModal.Close()">Cancel</button>
            </div>
        </div>
    </EditForm>
</DataGridDemoModal>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="10px" class="mt-2 mb-4">
    <div class="dropdown">
        <a href="#" role="button" data-toggle="dropdown" aria-expanded="false" style="padding:0.5rem 1rem" @onclick:preventDefault="true">
            <img src="assets/images/addnewrowbutton.svg" width="20" height="20" />
        </a>

        <ul class="dropdown-menu dropdown-menu-right">
            <li><a class="dropdown-item" href="#" @onclick="() => visitModal.Open()" @onclick:preventDefault="true">Add A Visit</a></li>
            <li><a class="dropdown-item" href="#" @onclick="() => commentModal.Open()" @onclick:preventDefault="true">Add A Comment</a></li>
        </ul>
    </div>
</RadzenStack>

<DataGridRadzen @ref="@dataGridParentRef"
                Data=@treatmentCardGridData
                TType="TreatmentCardGrid"
                IsLoading="@loadingTreatmentCardGrid"
                LoadData="@LoadTreatmentCardGrid"
                QueryCount="@count"
                RadzenEditMode="@radzenEditMode"
                CellRender="@CellRender">

    <CustomColumnsMarkup>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Date" Title="Date" FormatString="{0:MM/dd/yyyy}"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Type" Title="T" Context="treatment"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Asst" Title="ASST">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.Asst
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Proc" Title="PROC">
            <Template Context="treatment">
                @if (treatment.Type == "V")
                {
                    <span @ondblclick="() => OpenEditVisitModal(treatment)">
                        @treatment.Proc
                    </span>
                }
                else if (treatment.Type == "C")
                {
                    <span @ondblclick="() => OpenEditCommentModal(treatment)">
                        @treatment.Proc
                    </span>
                }         
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.Proc" Style="width:200px; display: block" Name="Proc" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="DR" Title="DR">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.DR
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="TxNotes" Title="Tx Notes">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.TxNotes
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="AWU" Title="AWU">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.AWU
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="BB" Title="BB">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.BB
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="AWL" Title="AWL">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.AWL
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="OH" Title="OH">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.OH
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="EL" Title="E/L">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.EL
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="NVT" Title="NVT">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.NVT
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="WKS" Title="WKS">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.WKS
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Chart" Title="Chart">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.Chart
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Test" Title="Test">
            <Template Context="treatment">
                <span @ondblclick="() => OpenEditVisitModal(treatment)">
                    @treatment.Test
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Context="treatment" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true">
            <Template Context="treatment">
                @if (treatment.Date.Year >= 2020)
                {
                    <button class="btn btn-light btn-flat btn-medium" style="cursor:pointer;background:none;outline:none;border:none" @onclick="@(args => DeleteRow(treatment))" @onclick:stopPropagation="true">
                        <img src="assets/images/trashicon-enabled.svg" width="21" height="21" />
                    </button>
                }
                else
                {
                    <button class="btn btn-light btn-flat btn-medium" style="cursor:default;background:none;outline:none;border:none">
                        <img src="assets/images/trashicon-disabled.svg" width="21" height="21" />
                    </button>
                }
            </Template>
        </RadzenDataGridColumn>
    </CustomColumnsMarkup>

</DataGridRadzen>




@code {
    private DataGridRadzen<TreatmentCardGrid> dataGridParentRef;
    private List<TreatmentCardGrid>? treatmentCardGridData;
    private bool loadingTreatmentCardGrid { get; set; }
    private int count;
    private DataGridEditMode radzenEditMode = DataGridEditMode.Single;
    private List<string> entryTypes = new List<string>() { "C", "V" };

    private DataGridDemoModal visitModal;
    private DataGridDemoModal commentModal;
    private TreatmentCardGrid treatmentCardEntryModel = new TreatmentCardGrid();

    private async Task LoadTreatmentCardGrid(LoadDataArgs args)
    {
        loadingTreatmentCardGrid = true;

        // treatmentCardGridData = await Http.GetFromJsonAsync<List<TreatmentCardGrid>>("sample-data/treatmentgrid.json");
        var data = await _dataAccessService.GetTreatmentCardEntries();

        var query = data?.AsQueryable();

        // Enable sorting with Dynamic LINQ (System.Linq.Dynamic.Core)
        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query?.OrderBy(args.OrderBy);
        }

        count = query?.Count() ?? 0;

        await Task.Delay(2000);

        data = await Task.FromResult(query?.Skip(args.Skip.Value).Take(args.Top.Value).ToList());

        treatmentCardGridData = data;

        loadingTreatmentCardGrid = false;
    }

    private List<TreatmentCardGrid> recordsToInsert = new List<TreatmentCardGrid>();
    private List<TreatmentCardGrid> recordsToUpdate = new List<TreatmentCardGrid>();

    private void Reset()
    {
        recordsToInsert.Clear();
        recordsToUpdate.Clear();
    }

    private void Reset(TreatmentCardGrid treatmentEntry)
    {
        recordsToInsert.Remove(treatmentEntry);
        recordsToUpdate.Remove(treatmentEntry);
    }

    private async Task EditRow(TreatmentCardGrid treatmentEntry)
    {
        await dataGridParentRef.dataGridRef.EditRow(treatmentEntry);

        // placeholder for DB interaction
    }

    private async Task SaveRow(TreatmentCardGrid treatmentEntry)
    {
        if (treatmentEntry.Type == "C")
        {
            // save comment entry in db
        }
        else if (treatmentEntry.Type == "V")
        {
            // save visit entry in db
        }

        await dataGridParentRef.dataGridRef.UpdateRow(treatmentEntry);
        _dataAccessService.HandleTreatmentCardEntry(treatmentEntry, false);

        // placeholder for DB interaction
    }

    private void CancelEdit(TreatmentCardGrid treatmentEntry)
    {
        Reset(treatmentEntry);
        dataGridParentRef.dataGridRef.CancelEditRow(treatmentEntry);

        // in some cases (such as changing the entry type from V to C), CancelEditRow does not cancel as expected
        // will need to reload datagrid to show that the row has not changed
        dataGridParentRef.dataGridRef.Reload();

        // placeholder for DB interaction
    }

    private void DeleteRow(TreatmentCardGrid treatmentEntry)
    {
        var output = $"DeleteRow invoked, current TreatmentCardGrid ASST: {treatmentEntry.Asst}";

        _dataAccessService.HandleTreatmentCardEntry(treatmentEntry, true);
        dataGridParentRef.dataGridRef.Reload();

        // placeholder for DB interaction
    }

    private async Task InsertRow()
    {
        if (dataGridParentRef.dataGridRef.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var treatment = new TreatmentCardGrid();
        recordsToInsert.Add(treatment);
        await dataGridParentRef.dataGridRef.InsertRow(treatment);
        Reset();

        // placeholder for DB interaction
    }

    private void CellRender(DataGridCellRenderEventArgs<TreatmentCardGrid> args)
    {
        if (args.Data.Type == "C" && args.Column.Property == "Proc")
        {
            // override Proc column value
            args.Data.Proc = args.Data.Comment;

            // args.Attributes.Add("style", "background-color:white");
            args.Attributes.Add("colspan", 12);
        }
    }

    private void OpenEditVisitModal(TreatmentCardGrid treatmentEntry)
    {
        treatmentCardEntryModel.Id = treatmentEntry.Id;
        treatmentCardEntryModel.Asst = treatmentEntry.Asst;
        treatmentCardEntryModel.Proc = treatmentEntry.Proc;
        treatmentCardEntryModel.DR = treatmentEntry.DR;
        treatmentCardEntryModel.TxNotes = treatmentEntry.TxNotes;
        treatmentCardEntryModel.AWU = treatmentEntry.AWU;
        treatmentCardEntryModel.BB = treatmentEntry.BB;
        treatmentCardEntryModel.AWL = treatmentEntry.AWL;
        treatmentCardEntryModel.OH = treatmentEntry.OH;
        treatmentCardEntryModel.EL = treatmentEntry.EL;
        treatmentCardEntryModel.NVT = treatmentEntry.NVT;
        treatmentCardEntryModel.WKS = treatmentEntry.WKS;
        treatmentCardEntryModel.Chart = treatmentEntry.Chart;
        treatmentCardEntryModel.Test = treatmentEntry.Test;

        visitModal.Open();
    }

    private void OpenEditCommentModal(TreatmentCardGrid treatmentEntry)
    {
        treatmentCardEntryModel.Id = treatmentEntry.Id;
        treatmentCardEntryModel.Asst = treatmentEntry.Asst;
        treatmentCardEntryModel.Comment = treatmentEntry.Comment;

        commentModal.Open();
    }

    private async Task OnVisitFormSubmission()
    {
        treatmentCardEntryModel.Type = "V";
        await SaveRow(treatmentCardEntryModel);
        visitModal.Close();
        await dataGridParentRef.dataGridRef.Reload();
        treatmentCardEntryModel = new TreatmentCardGrid();
    }

    private async Task OnCommentFormSubmission()
    {
        treatmentCardEntryModel.Type = "C";
        await SaveRow(treatmentCardEntryModel);
        commentModal.Close();
        await dataGridParentRef.dataGridRef.Reload();
        treatmentCardEntryModel = new TreatmentCardGrid();
    }

}
