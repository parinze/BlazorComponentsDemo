@page "/radzendatagridedit"
@using System.Linq.Dynamic.Core
@inject IDataAccessService _dataAccessService
@inject HttpClient Http

<h3>Radzen DataGrid TreatmentCardGrid</h3>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="10px" class="mt-2 mb-4" >
    <RadzenButton Image="assets/images/addnewrowbutton.svg"
                  Click="@InsertRow" 
                  Disabled="@(radzenEditMode == DataGridEditMode.Single && recordsToInsert.Count() > 0)"
                  Style="float:right;background-color:white" />
</RadzenStack>

<DataGridRadzen @ref="@dataGridParentRef"
                Data=@treatmentCardGridData
                TType="TreatmentCardGrid"
                IsLoading="@loadingTreatmentCardGrid"
                LoadData="@LoadTreatmentCardGrid"
                QueryCount="@count"
                RadzenEditMode="@radzenEditMode"
                CellRender="@CellRender">

    <CustomColumnsMarkup>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Date" Title="Date" FormatString="{0:MM/dd/yyyy}"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Type" Title="T" Context="treatment">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.Type
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenDropDown @bind-Value="treatment.Type" Name="Type" Data="@entryTypes" Style="width:200px; display: block;" />
                <RadzenRequiredValidator Text="Entry type is required" Component="Type" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Asst" Title="ASST">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.Asst
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.Asst" Style="width:200px; display: block" Name="Asst" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Proc" Title="PROC">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.Proc
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.Proc" Style="width:200px; display: block" Name="Proc" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="DR" Title="DR">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.DR
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.DR" Style="width:200px; display: block" Name="DR" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="TxNotes" Title="Tx Notes">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.TxNotes
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.TxNotes" Style="width:200px; display: block" Name="TxNotes" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="AWU" Title="AWU">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.AWU
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.AWU" Style="width:200px; display: block" Name="AWU" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="BB" Title="BB">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.BB
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.BB" Style="width:200px; display: block" Name="BB" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="AWL" Title="AWL">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.AWL
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.AWL" Style="width:200px; display: block" Name="AWL" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="OH" Title="OH">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.OH
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.OH" Style="width:200px; display: block" Name="OH" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="EL" Title="E/L">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.EL
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.EL" Style="width:200px; display: block" Name="EL" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="NVT" Title="NVT">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.NVT
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.NVT" Style="width:200px; display: block" Name="NVT" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="WKS" Title="WKS">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.WKS
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenNumeric @bind-Value="treatment.WKS" Style="width:200px; display: block" Name="WKS" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Chart" Title="Chart">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.Chart
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.Chart" Style="width:200px; display: block" Name="Chart" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Property="Test" Title="Test">
            <Template Context="treatment">
                <span @ondblclick="async () => await EditRow(treatment)">
                    @treatment.Test
                </span>
            </Template>
            <EditTemplate Context="treatment">
                <RadzenTextBox @bind-Value="treatment.Test" Style="width:200px; display: block" Name="Test" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TreatmentCardGrid" Context="treatment" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
            <Template Context="treatment">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(treatment))" @onclick:stopPropagation="true">
                </RadzenButton>
                @if (treatment.Date.Year >= 2019)
                {
                    <button class="btn btn-light btn-flat btn-medium" @onclick="@(args => DeleteRow(treatment))" @onclick:stopPropagation="true">
                        <img src="assets/images/trashicon-enabled.svg" width="21" height="21" />
                    </button>
                }
                else
                {
                    <button class="btn btn-light btn-flat btn-medium" style="cursor:default">
                        <img src="assets/images/trashicon-disabled.svg" width="21" height="21" />
                    </button>
                }
            </Template>
            <EditTemplate Context="treatment">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(treatment))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(treatment))">
                </RadzenButton>
                @if (treatment.Date.Year >= 2020)
                {
                    <button class="btn btn-light btn-flat btn-medium" @onclick="@(args => DeleteRow(treatment))" @onclick:stopPropagation="true">
                        <img src="assets/images/trashicon-enabled.svg" width="21" height="21" />
                    </button>
                }
                else
                {
                    <button class="btn btn-light btn-flat btn-medium" style="cursor:default">
                        <img src="assets/images/trashicon-disabled.svg" width="21" height="21" />
                    </button>
                }
            </EditTemplate>
        </RadzenDataGridColumn>
    </CustomColumnsMarkup>

</DataGridRadzen>


@code {
    private DataGridRadzen<TreatmentCardGrid> dataGridParentRef;
    private List<TreatmentCardGrid>? treatmentCardGridData;
    private bool loadingTreatmentCardGrid { get; set; }
    private int count;
    private DataGridEditMode radzenEditMode = DataGridEditMode.Single;
    private List<string> entryTypes = new List<string>() { "C", "V" };

    private async Task LoadTreatmentCardGrid(LoadDataArgs args)
    {
        loadingTreatmentCardGrid = true;

        // treatmentCardGridData = await Http.GetFromJsonAsync<List<TreatmentCardGrid>>("sample-data/treatmentgrid.json");
        var data = _dataAccessService.GetTreatmentCardEntries();

        var query = data?.AsQueryable();

        // Enable sorting with Dynamic LINQ (System.Linq.Dynamic.Core)
        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query?.OrderBy(args.OrderBy);
        }

        count = query?.Count() ?? 0;

        await Task.Delay(2000);

        data = await Task.FromResult(query?.Skip(args.Skip.Value).Take(args.Top.Value).ToList());

        treatmentCardGridData = data;

        loadingTreatmentCardGrid = false;
    }

    private List<TreatmentCardGrid> recordsToInsert = new List<TreatmentCardGrid>();
    private List<TreatmentCardGrid> recordsToUpdate = new List<TreatmentCardGrid>();

    private void Reset()
    {
        recordsToInsert.Clear();
        recordsToUpdate.Clear();
    }

    private void Reset(TreatmentCardGrid treatmentEntry)
    {
        recordsToInsert.Remove(treatmentEntry);
        recordsToUpdate.Remove(treatmentEntry);
    }

    private async Task EditRow(TreatmentCardGrid treatmentEntry)
    {
        await dataGridParentRef.dataGridRef.EditRow(treatmentEntry);

        // placeholder for DB interaction
    }

    private async Task SaveRow(TreatmentCardGrid treatmentEntry)
    {
        if (treatmentEntry.Type == "C")
        {
            // save comment entry in db
        }
        else if (treatmentEntry.Type == "V")
        {
            // save visit entry in db
        }

        await dataGridParentRef.dataGridRef.UpdateRow(treatmentEntry);

        // placeholder for DB interaction
    }

    private void CancelEdit(TreatmentCardGrid treatmentEntry)
    {
        Reset(treatmentEntry);
        dataGridParentRef.dataGridRef.CancelEditRow(treatmentEntry);

        // in some cases (such as changing the entry type from V to C), CancelEditRow does not cancel as expected
        // will need to reload datagrid to show that the row has not changed
        dataGridParentRef.dataGridRef.Reload();

        // placeholder for DB interaction
    }

    private void DeleteRow(TreatmentCardGrid treatmentEntry)
    {
        var output = $"DeleteRow invoked, current TreatmentCardGrid ASST: {treatmentEntry.Asst}";

        _dataAccessService.DeleteTreatmentCardEntry(treatmentEntry);
        dataGridParentRef.dataGridRef.Reload();

        // placeholder for DB interaction
    }

    private async Task InsertRow()
    {
        if (dataGridParentRef.dataGridRef.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var treatment = new TreatmentCardGrid();
        recordsToInsert.Add(treatment);
        await dataGridParentRef.dataGridRef.InsertRow(treatment);
        Reset();

        // placeholder for DB interaction
    }

    private void CellRender(DataGridCellRenderEventArgs<TreatmentCardGrid> args)
    {
        if (args.Data.Type == "C" && args.Column.Property == "Asst")
        {
            args.Attributes.Add("style", "background-color:white");
            args.Attributes.Add("colspan", 13);
        }
    }

}
