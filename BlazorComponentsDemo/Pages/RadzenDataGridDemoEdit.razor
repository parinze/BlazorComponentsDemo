@page "/radzendatagridedit"
@inject HttpClient Http
@* @inject IJSRuntime JS *@
@* @implements IAsyncDisposable *@

<style>
    tr.rz-data-row:hover {
        background-color: #cfdee7 !important;
    }

    tr.rz-state-highlight.rz-data-row {
        background-color: #007ac3 !important;
        color: white;
    }
</style>

<h3>Radzen DataGrid Demo</h3>

@* @if (testData == null) *@
@if (isLoading == true)
{
    <div class="datagridspinnercontainer">
        <img src="assets/images/datagridspinner.svg" class="datagridspinner">
        <div class="datagridloading">Loading</div>
    </div>
}
else
{
    <RadzenDataGrid 
        @ref="dataGrid"
        AllowPaging="true" 
        PageSize="3" 
        AllowSorting="true"
        AllowFiltering="true"
        FilterMode="FilterMode.Advanced"
        LogicalFilterOperator="LogicalFilterOperator.Or"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowAlternatingRows="true"
        Data="@testData" 
        TItem="TestData" 
        ColumnWidth="100px"
        AllowColumnResize="true">
    <Columns>
            <RadzenDataGridColumn TItem="TestData" Property="Date" Title="Date" />
            <RadzenDataGridColumn TItem="TestData" Property="Type" Title="Type" />
            <RadzenDataGridColumn TItem="TestData" Property="Patient" Title="Patient" />
            <RadzenDataGridColumn TItem="TestData" Property="Location" Title="Location" />
            <RadzenDataGridColumn TItem="TestData" Property="SMS" Title="SMS" />
            <RadzenDataGridColumn TItem="TestData" Property="View" Title="View" />
            <RadzenDataGridColumn TItem="TestData" Property="LastView" Title="LastView" />
            <RadzenDataGridColumn TItem="TestData" Property="Status" Title="Status">
                <Template>
                    @context.Status
                    <RadzenButton Icon="edit" Style="float:right" Size="ButtonSize.Small" Click="@(args => EditRow(@context))" />
                </Template>
                <EditTemplate>
                    <RadzenTextBox @bind-Value="@context.Status" Style="width:100px; display:block" Name="Status" />
                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => UpdateRow(@context))" />
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(@context))" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TestData" Property="Outcome" Title="Outcome" />
            <RadzenDataGridColumn TItem="TestData" Property="OutcomeDate" Title="OutcomeDate" />
            <RadzenDataGridColumn TItem="TestData" Property="SentBy" Title="SentBy" />
            <RadzenDataGridColumn TItem="TestData" Property="Expiration" Title="Expiration" />
    </Columns>
</RadzenDataGrid>
}

@code {
    RadzenDataGrid<TestData> dataGrid;
    private IEnumerable<TestData>? testData;
    private string BadgeColumnName = "Status";
    private bool isLoading = false;

    Dictionary<string, string> propertyToHeaderNames = new()
    {
        {"Id", "ID"},
        {"Date", "Date"},
        {"Type", "Type"},
        {"Patient", "Patient"},
        {"Location", "Location"},
        {"SMS", "SMS"},
        {"Email", "Email"},
        {"View", "View"},
        {"LastView", "Last View"},
        {"Status", "Status"},
        {"Outcome", "Outcome"},
        {"OutcomeDate", "Outcome Date"},
        {"SentBy", "Sent By"},
        {"Expiration", "Expiration"}
    };

    private string[] GreenBadgeWords = new string[] { "Active" };
    private string[] RedBadgeWords = new string[] { "Expired" };


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        testData = await Http.GetFromJsonAsync<List<TestData>>("sample-data/testsampledata.json");
        // await Task.Delay(5000);
        isLoading = false;
        // forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private async Task EditRow(TestData testdata)
    {
        // Set the grid row in edit mode.
        await dataGrid.EditRow(testdata);
    }

    private async Task UpdateRow(TestData testdata)
    {
        // Set the grid row in read-only mode.
        await dataGrid.UpdateRow(testdata);

        // Update your data with provided values.
        // dbContext.Update<Order>(order);
        // dbContext.SaveChanges();
    }

    private void CancelEdit(TestData testdata)
    {
        // Set the grid row in read-only mode.
        dataGrid.CancelEditRow(testdata);

        // Revert all changes.
        // var orderEntry = dbContext.Entry(order);
        // orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        // orderEntry.State = EntityState.Unchanged;
    }
}
