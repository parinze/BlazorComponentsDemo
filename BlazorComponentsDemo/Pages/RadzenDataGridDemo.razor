@page "/radzendatagrid"
@using System.Linq.Dynamic.Core
@inject IDataAccessService _dataAccessService
@inject HttpClient Http

<h3>Radzen DataGrid Demo</h3>

<button class="btn btn-primary" onclick="@(() => UpdateFirstTestDataRecord())">Update Status for First Record</button>

<DataGridRadzen 
    Data=@testData
    TType="PeopleTestData"
    PropertyToHeaderName="@propertyToHeaderNames"
    Statuses="@statuses"
    IsLoading="@loadingTestData" 
    LoadData="@LoadTestData" 
    QueryCount="@count"
    ExcludedColumns="@excludedColumns"
    Updated=@updated/>

@code {
    private IEnumerable<PeopleTestData>? testData;
    private PeopleTestData? firstTestDataRecord;
    private bool loadingTestData { get; set; }
    private int count;
    private bool updated;

    Dictionary<string, string> propertyToHeaderNames = new()
    {
        {"FirstName", "First Name"},
        {"LastName", "Last Name"},
        {"BirthDate", "Birth Date"}
    };

    private List<Status> statuses { get; set; } = new List<Status>() {
        new Status() { Label = "true", Style = "background-color:#E5F2E8;color:#28A745;"},
        new Status() { Label = "false", Style = "background-color:#FAE5E5;color:#DC5151;"}
    };

    private List<string> excludedColumns = new List<string> { "Id" };

    private async Task LoadTestData(LoadDataArgs args)
    {

        loadingTestData = true;

        testData = await _dataAccessService.GetPeopleTestData();
        firstTestDataRecord = testData.FirstOrDefault();

        var query = testData.AsQueryable();

        // Enable sorting with Dynamic LINQ (System.Linq.Dynamic.Core)
        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        count = query?.Count() ?? 0;

        await Task.Delay(2000);

        testData = await Task.FromResult(query.Skip(args.Skip.Value).Take(args.Top.Value).ToList());

        loadingTestData = false;
    }

    private async Task UpdateFirstTestDataRecord()
    {
        if (firstTestDataRecord != null)
        {
            string status = firstTestDataRecord.Status == "true" ? "false" : "true";

            var updatedFirstRecord = new PeopleTestData
                {
                    Id = firstTestDataRecord.Id,
                    FirstName = firstTestDataRecord.FirstName,
                    LastName = firstTestDataRecord.LastName,
                    BirthDate = firstTestDataRecord.BirthDate,
                    Email = firstTestDataRecord.Email,
                    Status = status
                };

            await _dataAccessService.UpdatePeopleTestDataStatus(updatedFirstRecord.Id, updatedFirstRecord);
            updated = true;
        }
    }
}
