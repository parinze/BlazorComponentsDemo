@page "/radzendatagrid"
@inject IDataAccessService _dataAccessService

<h3>Radzen DataGrid Demo</h3>

@* <button type="button" class="btn btn-primary" onclick="@(() => UpdateFirstTestDataRecord())">Update Status for First Record</button> *@

<DataGridRadzen 
    Data=@testData
    TType="PeopleTestData"
    PropertyToHeaderName="@propertyToHeaderNames"
    Statuses="@statuses"
    IsLoading="@loadingTestData" 
    LoadData="@LoadTestData" 
    QueryCount="@count"/>

@code {
    private List<PeopleTestData>? testData;
    private PeopleTestData? firstTestDataRecord;
    private bool loadingTestData { get; set; }
    private int count;

    Dictionary<string, string> propertyToHeaderNames = new()
    {
        {"Id", "ID"},
        {"FirstName", "First Name"},
        {"LastName", "Last Name"},
        {"Email", "Email"},
        {"BirthDate", "Birth Date"},
        {"Location", "Location"},
        {"Status", "Status"}
    };

    private List<Status> statuses { get; set; } = new List<Status>() {
        new Status() { Label = "true", Style = "background-color:#E5F2E8;color:#28A745;", Code = 1 },
        new Status() { Label = "false", Style = "background-color:#FAE5E5;color:#DC5151;", Code = 0 }
    };

    private async Task LoadTestData(LoadDataArgs args)
    {
        loadingTestData = true;

        testData = await _dataAccessService.GetPeopleTestData();
        firstTestDataRecord = testData.FirstOrDefault();
        
        var query = testData.AsQueryable();
        
        count = query?.Count() ?? 0;
        
        await Task.Delay(2000);
        
        testData = await Task.FromResult(query.Skip(args.Skip.Value).Take(args.Top.Value).ToList());
        
        loadingTestData = false;
    }
}
