@page "/radzendatagridpbi"
@inject HttpClient Http

<h3>Radzen DataGrid Demo2</h3>

<DataGridRadzen 
    Data=@testData
    TType="TestData"
    PropertyToHeaderName="@propertyToHeaderNames"
    Statuses="@Statuses"
    IsLoading="@loadingTestData"
    LoadData="@LoadTestData"
    QueryCount="@count" />

@code {
    private List<TestData>? testData;
    private PeopleTestData? firstTestDataRecord;
    private bool loadingTestData { get; set; }
    private int count;

    Dictionary<string, string> propertyToHeaderNames = new()
    {
        {"Id", "ID"},
        {"Date", "Date"},
        {"Type", "Type"},
        {"Patient", "Patient"},
        {"Location", "Location"},
        {"SMS", "SMS"},
        {"Email", "Email"},
        {"View", "View"},
        {"LastView", "Last View"},
        {"Status", "Status"},
        {"Outcome", "Outcome"},
        {"OutcomeDate", "Outcome Date"},
        {"SentBy", "Sent By"},
        {"Expiration", "Expiration"}
    };

    private List<Status> Statuses { get; set; } = new List<Status>() {
        new Status() { Label = "New", Style = "background-color:#DAD9D9;color:#636262;"},
        new Status() { Label = "Active", Style = "background-color:#E5F2E8;color:#28A745;"},
        new Status() { Label = "Expired", Style = "background-color:#FAE5E5;color:#DC5151;"}
    };

    private async Task LoadTestData(LoadDataArgs args)
    {
        loadingTestData = true;

        testData = await Http.GetFromJsonAsync<List<TestData>>("sample-data/testsampledata.json");

        var query = testData.AsQueryable();

        count = query?.Count() ?? 0;

        await Task.Delay(2000);

        testData = await Task.FromResult(query.Skip(args.Skip.Value).Take(args.Top.Value).ToList());

        loadingTestData = false;
    }
}
