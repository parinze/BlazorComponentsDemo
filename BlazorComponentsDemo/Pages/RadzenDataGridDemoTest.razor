@page "/radzendatagridtest"
@inject HttpClient Http
@* @inject IJSRuntime JS *@
@* @implements IAsyncDisposable *@

<style>
    tr.rz-data-row:hover {
        background-color: #cfdee7 !important;
    }

    tr.rz-state-highlight.rz-data-row {
        background-color: #007ac3 !important;
        color: white;
    }
</style>

<h3>Radzen DataGrid Demo</h3>

<div class="col-3">
    <div class="form-group">
        <label for="patientInput">Filter By Patient:</label>
        <input type="text" class="form-control" id="patientInput" placeholder="Find Patient" @bind="selectedPatient" />
    
        <label for="statusDropdown">Filter By Status:</label>
        <select class="form-control" id="statusDropdown" @bind="selectedStatus">
            <option value="Active">Active</option>
            <option value="Expired">Expired</option>
            <option value="New">New</option>
        </select>
    </div>
</div>


<button type="button" class="btn btn-primary" @onclick="ApplyFilter">Apply</button>

@* @if (testData == null) *@
@if (isLoading == true)
{
    <div class="datagridspinnercontainer">
        <img src="assets/images/datagridspinner.svg" class="datagridspinner">
        <div class="datagridloading">Loading</div>
    </div>
}
else
{
    <RadzenDataGrid 
        AllowPaging="true" 
        PageSize="3" 
        AllowSorting="true"
        AllowFiltering="true"
        FilterMode="FilterMode.Advanced"
        LogicalFilterOperator="LogicalFilterOperator.Or"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowAlternatingRows="true"
		AllowRowSelectOnRowClick="true"
        SelectionMode="DataGridSelectionMode.Single"
        @bind-Value=@selectedTestDataItems
        Data="@filteredTestData" 
        TItem="TestData" 
        ColumnWidth="200px"
        AllowColumnResize="true">
    <Columns>
            <RadzenDataGridColumn TItem="TestData" Property="Date" Title="Date" />
            <RadzenDataGridColumn TItem="TestData" Property="Type" Title="Type" />
            <RadzenDataGridColumn TItem="TestData" Property="Patient" Title="Patient" />
            <RadzenDataGridColumn TItem="TestData" Property="Location" Title="Location" />
            <RadzenDataGridColumn TItem="TestData" Property="SMS" Title="SMS" />
            <RadzenDataGridColumn TItem="TestData" Property="View" Title="View" />
            <RadzenDataGridColumn TItem="TestData" Property="LastView" Title="LastView" />
            <RadzenDataGridColumn TItem="TestData" Property="Status" Title="Status" />
            <RadzenDataGridColumn TItem="TestData" Property="Outcome" Title="Outcome" />
            <RadzenDataGridColumn TItem="TestData" Property="OutcomeDate" Title="OutcomeDate" />
            <RadzenDataGridColumn TItem="TestData" Property="SentBy" Title="SentBy" />
            <RadzenDataGridColumn TItem="TestData" Property="Expiration" Title="Expiration" />

            @* WEATHER
            <RadzenGridColumn TItem="@TType" Property="Date" Title="Date"></RadzenGridColumn>
            <RadzenGridColumn TItem="@TType" Property="TemperatureC" Title="Temp (C)"></RadzenGridColumn>
            <RadzenGridColumn TItem="@TType" Property="Summary" Title="Summary"></RadzenGridColumn>
            <RadzenGridColumn TItem="@TType" Property="TemperatureF" Title="Temp (F)"></RadzenGridColumn> *@
    </Columns>
</RadzenDataGrid>
}

@code {
    private IEnumerable<TestData>? testData;
    private IEnumerable<TestData>? filteredTestData;
    private string BadgeColumnName = "Status";
    private bool isLoading = false;

    private IList<TestData> selectedTestDataItems;
    private string selectedStatus = "";
    private string selectedPatient = "";

    void ClearSelection()
    {
        selectedTestDataItems = null;
    }

    Dictionary<string, string> propertyToHeaderNames = new()
    {
        {"Id", "ID"},
        {"Date", "Date"},
        {"Type", "Type"},
        {"Patient", "Patient"},
        {"Location", "Location"},
        {"SMS", "SMS"},
        {"Email", "Email"},
        {"View", "View"},
        {"LastView", "Last View"},
        {"Status", "Status"},
        {"Outcome", "Outcome"},
        {"OutcomeDate", "Outcome Date"},
        {"SentBy", "Sent By"},
        {"Expiration", "Expiration"}
    };

    private List<Status> Statuses { get; set; } = new List<Status>() {
        new Status() { Label = "New", Style = "background-color:#DAD9D9;color:#636262;", Code = null },
        new Status() { Label = "Active", Style = "background-color:#E5F2E8;color:#28A745;", Code = 1 },
        new Status() { Label = "Expired", Style = "background-color:#FAE5E5;color:#DC5151;", Code = 0 }
    };


    // private WeatherForecast[]? forecasts;

    // Property, Human-readable header
    // Dictionary<string, string> dictionary = new()
    // {
    //     { "Date", "Date" },
    //     { "TemperatureC", "Temp (C)" },
    //     { "Summary", "Summary" },
    //     { "TemperatureF", "Temp (F)" }
    // };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        testData = await Http.GetFromJsonAsync<List<TestData>>("sample-data/testsampledata.json");
        filteredTestData = testData;
        await Task.Delay(5000);
        isLoading = false;
        // forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private async Task ApplyFilter()
    {
        isLoading = true;

        var lowerCaseSelectedPatient = selectedPatient?.ToLower();

        if (testData == null)
        {
            filteredTestData = null;
        }
        else if (!string.IsNullOrEmpty(selectedStatus) && !string.IsNullOrEmpty(lowerCaseSelectedPatient))
        {
            filteredTestData = testData.Where(t => t.Patient.ToLower().Contains(lowerCaseSelectedPatient)
                                                && t.Status == selectedStatus).ToList();
        }
        else if (!string.IsNullOrEmpty(lowerCaseSelectedPatient))
        {
            filteredTestData = testData.Where(t => t.Patient.ToLower().Contains(lowerCaseSelectedPatient)).ToList();
        }
        else if (!string.IsNullOrEmpty(selectedStatus))
        {
            filteredTestData = testData.Where(t => t.Status == selectedStatus).ToList();
        }
        else
        {
            filteredTestData = testData;
        }

        await Task.Delay(3000);

        isLoading = false;
    }

    // private IJSObjectReference? jsModule;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // 	jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./scripts/radzendatagridscript.js");

    // 	if(firstRender)
    // 	{
    // 		// By default, RadzenDataGrid will initially display '10' for the page size dropdown label on page load.
    // 		// This Javascript call sets the label to the correct minimum page size number.
    // 		int minPageSizeOption = PageSizeOptions.FirstOrDefault();
    // 		Console.WriteLine("FIRST RENDER : ONAFTERRENDER");
    // 		await jsModule.InvokeVoidAsync("changeDropdownLabelText", $"{minPageSizeOption}");
    // 	}
    // }

    // async ValueTask IAsyncDisposable.DisposeAsync()
    // {
    // 	if (jsModule is not null)
    // 	{
    // 		await jsModule.DisposeAsync();
    // 	}
    // }
}
